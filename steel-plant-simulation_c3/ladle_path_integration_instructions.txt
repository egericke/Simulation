# Instructions for Integrating Ladle Car Path Drawing in Equipment Layout Editor

## Overview
These instructions guide you through adding ladle car path drawing functionality to the equipment layout editor. This will allow users to visually draw and edit ladle car paths that will be used for simulation.

## Step 1: Add Attributes to EquipmentLayoutEditor class
In the `EquipmentLayoutEditor.__init__` method, add these attributes after the existing initializations:

```python
# Attributes for path drawing
self.path_drawing = False
self.current_path_waypoints = []
self.current_path_item = None
```

## Step 2: Update the toggle_ladle_path_mode method
Replace the existing `toggle_ladle_path_mode` method with this enhanced version:

```python
def toggle_ladle_path_mode(self, checked):
    """Toggle ladle path drawing mode."""
    # Update scene's path mode
    self.scene.set_ladle_path_mode(checked)
    
    # Initialize path drawing attributes
    self.path_drawing = checked
    if checked:
        self.current_path_waypoints = []
        self.current_path_item = None
    
    # Disable other modes when ladle path mode is enabled
    if checked:
        if self.route_action.isChecked():
            self.route_action.setChecked(False)
        if self.bay_action.isChecked():
            self.bay_action.setChecked(False)
            
        # Switch to the Ladle Car Paths tab
        for i in range(self.findChild(QTabWidget).count()):
            if self.findChild(QTabWidget).tabText(i) == "Ladle Car Paths":
                self.findChild(QTabWidget).setCurrentIndex(i)
                break
        
        # Enable drawing mode in the ladle path editor
        if hasattr(self, "ladle_path_editor"):
            self.ladle_path_editor.toggle_path_drawing(True)
        
        self.status_label.setText("Ladle path mode: Click to add waypoints, finish by clicking button again")
    else:
        # Disable drawing mode in the ladle path editor
        if hasattr(self, "ladle_path_editor"):
            self.ladle_path_editor.toggle_path_drawing(False)
        self.status_label.setText("Ready")
```

## Step 3: Add New Path Drawing Methods
Add these new methods to the EquipmentLayoutEditor class:

```python
def start_drawing_path(self):
    """Start drawing a new ladle car path."""
    # Find the bay selector or use the LadlePathEditor's bay combo
    bay_selector = getattr(self, "bay_selector", None)
    if not bay_selector and hasattr(self, "ladle_path_editor"):
        bay_selector = self.ladle_path_editor.bay_combo
        
    if not bay_selector or not bay_selector.currentText():
        QMessageBox.warning(self, "No Bay Selected", "Please select a bay first.")
        return
        
    # Enable path drawing mode via toggle
    self.path_action.setChecked(True)
    self.toggle_ladle_path_mode(True)
    
    # Initialize path state
    self.path_drawing = True
    self.current_path_waypoints = []
    self.current_path_item = None
    logger.info(f"Started drawing path for bay {bay_selector.currentText()}")

def finish_drawing_path(self):
    """Finish drawing the current path and save it."""
    if not self.path_drawing or len(self.current_path_waypoints) < 2:
        QMessageBox.warning(self, "Invalid Path", "Path must have at least 2 waypoints.")
        return
        
    # Find the bay selector or use the LadlePathEditor's bay combo
    bay_selector = getattr(self, "bay_selector", None)
    if not bay_selector and hasattr(self, "ladle_path_editor"):
        bay_selector = self.ladle_path_editor.bay_combo
        
    bay_name = bay_selector.currentText()
    
    # Get the next path ID or use the one from the LadlePathEditor
    path_id = None
    if hasattr(self, "ladle_path_editor"):
        path_id = self.ladle_path_editor.path_id_spin.value()
    else:
        # Find the next available path ID
        path_id = 1
        if "ladle_car_paths" in self.config and bay_name in self.config["ladle_car_paths"]:
            path_ids = [p.get("path_id", 0) for p in self.config["ladle_car_paths"][bay_name]]
            if path_ids:
                path_id = max(path_ids) + 1
    
    # Save path to config
    path = {"path_id": path_id, "waypoints": self.current_path_waypoints}
    if "ladle_car_paths" not in self.config:
        self.config["ladle_car_paths"] = {}
    if bay_name not in self.config["ladle_car_paths"]:
        self.config["ladle_car_paths"][bay_name] = []
        
    # Check if path ID already exists and replace it
    found = False
    for i, existing_path in enumerate(self.config["ladle_car_paths"].get(bay_name, [])):
        if existing_path.get("path_id") == path_id:
            self.config["ladle_car_paths"][bay_name][i] = path
            found = True
            break
            
    if not found:
        self.config["ladle_car_paths"][bay_name].append(path)
        
    # Reset path drawing state
    self.path_drawing = False
    self.current_path_waypoints = []
    self.current_path_item = None
    
    # Update the scene and disable path mode
    self.scene.update()
    self.path_action.setChecked(False)
    self.toggle_ladle_path_mode(False)
    
    # Update the ladle path editor's list if it exists
    if hasattr(self, "ladle_path_editor"):
        self.ladle_path_editor.update_paths_list()
        
    logger.info(f"Finished path {path_id} for bay {bay_name}")
```

## Step 4: Update LayoutScene's mouseReleaseEvent Method
In the `mouseReleaseEvent` method of the `LayoutScene` class, there's already code that handles ladle path mode. Make sure it's capturing waypoints correctly:

```python
# Handle ladle path mode clicks - forward to the ladle path editor
elif hasattr(self, "ladle_path_mode") and self.ladle_path_mode:
    pos = event.scenePos()
    
    # Find the equipment layout editor
    for view in self.views():
        window = view.window()
        if hasattr(window, "current_path_waypoints"):
            # Add waypoint to editor's list
            window.current_path_waypoints.append({"x": pos.x(), "y": pos.y()})
            
            # Draw visual representation
            if len(window.current_path_waypoints) > 1:
                p1 = window.current_path_waypoints[-2]
                p2 = window.current_path_waypoints[-1]
                
                # Draw a line segment
                from PyQt5.QtGui import QPainterPath, QPen, QColor
                path = QPainterPath()
                path.moveTo(p1["x"], p1["y"])
                path.lineTo(p2["x"], p2["y"])
                
                path_item = QGraphicsPathItem(path)
                path_item.setPen(QPen(QColor(0, 128, 255), 2, Qt.DashLine))
                self.addItem(path_item)
            
            # Also forward to ladle path editor if it exists
            if hasattr(window, "ladle_path_editor"):
                window.ladle_path_editor.add_waypoint(pos)
                
            event.accept()
            return
```

## Step 5: Add Bay Selector and Path Controls to UI
Add a bay selector and path drawing buttons to the controls layout in `EquipmentLayoutEditor.create_ui`:

```python
# After adding zoom controls
bay_selector_label = QLabel("Select Bay for Path:")
self.bay_selector = QComboBox()
self.bay_selector.addItems(self.config.get("bays", {}).keys())
controls_layout.addWidget(bay_selector_label)
controls_layout.addWidget(self.bay_selector)

add_path_btn = QPushButton("Add Path")
add_path_btn.setStyleSheet("background-color: #4CAF50; color: white; font-size: 14px; padding: 5px;")
add_path_btn.clicked.connect(self.start_drawing_path)
add_path_btn.setToolTip("Start drawing a ladle car path for the selected bay")
controls_layout.addWidget(add_path_btn)

finish_path_btn = QPushButton("Finish Path")
finish_path_btn.setStyleSheet("background-color: #FF9800; color: white; font-size: 14px; padding: 5px;")
finish_path_btn.clicked.connect(self.finish_drawing_path)
finish_path_btn.setToolTip("Finish the current path")
controls_layout.addWidget(finish_path_btn)
```

## Step 6: Update save_layout and Load_layout_data Methods
Make sure these methods properly handle ladle car paths:

In `save_layout`, ensure ladle car paths are saved:
```python
# Save ladle car paths from scene to config
self.config["ladle_car_paths"] = self.scene.get_ladle_car_paths() 
# Or directly use:
# self.config["ladle_car_paths"] = self.scene.ladle_car_paths
```

In `load_layout_data`, ensure ladle car paths are loaded:
```python
# Load ladle car paths from config to scene
self.scene.ladle_car_paths = self.config.get("ladle_car_paths", {})
```

## Step 7: Add Drawing Visualization
Update the `LayoutScene` class to visualize paths when they're drawn and loaded:

1. Add a method to LayoutScene to draw paths:
```python
def draw_ladle_car_paths(self, painter):
    """Draw all ladle car paths."""
    for bay_name, paths in self.ladle_car_paths.items():
        for path in paths:
            waypoints = path.get("waypoints", [])
            if len(waypoints) < 2:
                continue
                
            # Draw path lines
            painter.setPen(QPen(QColor(0, 128, 255), 2, Qt.SolidLine))
            for i in range(len(waypoints) - 1):
                p1 = waypoints[i]
                p2 = waypoints[i + 1]
                painter.drawLine(p1["x"], p1["y"], p2["x"], p2["y"])
                
            # Draw waypoints
            painter.setBrush(QBrush(QColor(0, 128, 255, 180)))
            for wp in waypoints:
                painter.drawEllipse(QPointF(wp["x"], wp["y"]), 5, 5)
```

2. Call this method from the scene's paint method:
```python
def paint(self, painter, option, widget=None):
    """Paint custom scene content."""
    super().paint(painter, option, widget)
    # Draw paths
    self.draw_ladle_car_paths(painter)
```

## Step 8: Update update_bay_combo Method
Make sure the bay selector is updated when bays are added or changed:

```python
def update_bay_combo(self):
    """Update bay combo box with current bay items."""
    current_text = self.bay_combo.currentText()
    self.bay_combo.clear()
    for bay in self.scene.bay_items:
        self.bay_combo.addItem(bay.name)
    
    # Also update the bay selector for paths
    if hasattr(self, "bay_selector"):
        bay_selector_text = self.bay_selector.currentText()
        self.bay_selector.clear()
        for bay in self.scene.bay_items:
            self.bay_selector.addItem(bay.name)
        
        # Try to restore the previous selection
        index = self.bay_selector.findText(bay_selector_text)
        if index >= 0:
            self.bay_selector.setCurrentIndex(index)
    
    # Try to restore the previous selection
    index = self.bay_combo.findText(current_text)
    if index >= 0:
        self.bay_combo.setCurrentIndex(index)
```

These changes will fully integrate the ladle car path drawing capabilities into the equipment layout editor.